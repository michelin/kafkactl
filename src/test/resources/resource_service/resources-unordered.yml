---
apiVersion: v1
kind: Topic
metadata:
  name: demoPrefix.topic_64
  namespace: demo
spec:
  replicationFactor: 1
  partitions: 1
  configs:
    cleanup.policy: "delete"
    min.insync.replicas: "1"
    retention.ms: 604800000
    confluent.value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
---
apiVersion: v1
kind: AccessControlEntry
metadata:
  name: acl-topic-schema
  namespace: demo
spec:
  resourceType: SCHEMA
  resource: demoPrefix.
  resourcePatternType: PREFIXED
  permission: OWNER
  grantedTo: demo
---
apiVersion: v1
kind: AccessControlEntry
metadata:
  name: acl-topic-demo
  namespace: demo
spec:
  resourceType: TOPIC
  resource: demoPrefix.
  resourcePatternType: PREFIXED
  permission: OWNER
  grantedTo: demo
---
apiVersion: v1
kind: Namespace
metadata:
  name: demo
  cluster: local
  labels:
    contacts: namespace.owner@example.com
spec:
  kafkaUser: user1
  connectClusters:
    - local
  topicValidator:
    validationConstraints:
      partitions:
        validation-type: Range
        min: 1
        max: 6
      replication.factor:
        validation-type: Range
        min: 1
        max: 1
      min.insync.replicas:
        validation-type: Range
        min: 1
        max: 1
      retention.ms:
        optional: true
        validation-type: Range
        min: 60000
        max: 604800000
      cleanup.policy:
        validation-type: ValidList
        validStrings:
          - delete
          - compact
      confluent.value.subject.name.strategy:
        validation-type: ValidString
        validStrings:
          - io.confluent.kafka.serializers.subject.TopicNameStrategy
          - io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
          - io.confluent.kafka.serializers.subject.RecordNameStrategy

  connectValidator:
    validationConstraints:
      key.converter:
        validation-type: NonEmptyString
      value.converter:
        validation-type: NonEmptyString
      connector.class:
        validation-type: ValidString
        validStrings:
          - io.confluent.connect.jdbc.JdbcSinkConnector
          - io.confluent.connect.jdbc.JdbcSourceConnector
          - io.confluent.kafka.connect.datagen.DatagenConnector
    classValidationConstraints:
      io.confluent.kafka.connect.datagen.DatagenConnector:
        schema.string:
          validation-type: NonEmptyString
        schema.keyfield:
          validation-type: NonEmptyString
---
apiVersion: v1
kind: Schema
metadata:
  name: demoPrefix.topic_64-value
spec:
  schema: |
    [
    "demo.User",
    "demo.Car"
    ]
  references:
    - name: demo.User
      subject: demoPrefix.topic_64-demo.User
      version: 1
    - name: demo.Car
      subject: demoPrefix.topic_64-demo.Car
      version: 1
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: myRoleBinding1
  namespace: myNamespace
spec:
  role:
    resourceTypes:
      - schemas
      - schemas/config
      - topics
      - topics/import
      - topics/delete-records
      - connectors
      - connectors/import
      - connectors/change-state
      - connect-clusters
      - connect-clusters/vaults
      - acls
      - consumer-groups/reset
      - streams
    verbs:
      - GET
      - POST
      - PUT
      - DELETE
  subject:
    subjectType: GROUP
    subjectName: ns4kafka
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: myRoleBinding2
  namespace: myNamespace
spec:
  role:
    resourceTypes:
      - quota
    verbs:
      - GET
  subject:
    subjectType: GROUP
    subjectName: ns4kafka
---
apiVersion: v1
kind: Schema
metadata:
  # demoPrefix.topic_64-demo.Car
  name: demoPrefix.topic_64-demo.Car
spec:
  schema: |
    {
      "type": "record",
      "name": "Car",
      "namespace": "demo",
      "fields": [
        {"name": "carId", "type": "string"},
        {"name": "make", "type": "string"},
        {"name": "model", "type": "string"},
        {"name": "year", "type": "int"},
        {"name": "color", "type": "string"},
        {"name": "ownerId", "type": ["null", "string"], "default": null}
      ]
    }
---
apiVersion: v1
kind: Schema
metadata:
  name: demoPrefix.topic_64-demo.User
spec:
  schema: |
    {
      "type": "record",
      "name": "User",
      "namespace": "demo",
      "fields": [
        {"name": "userId", "type": "string"},
        {"name": "name", "type": "string"},
        {"name": "email", "type": "string"},
        {"name": "age", "type": ["null", "int"], "default": null},
        {"name": "active", "type": "boolean", "default": true}
      ]
    }