plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.2"
    id("jacoco")
    id("org.sonarqube") version "4.4.1.3373"
    id("pl.allegro.tech.build.axion-release") version "1.16.1"
    id("checkstyle")
}

version = scmVersion.version
group = "com.michelin.kafkactl"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")

    implementation("info.picocli:picocli")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation("org.ocpsoft.prettytime:prettytime:5.0.7.Final")
    implementation("io.github.java-diff-utils:java-diff-utils:4.12")
    implementation("io.micronaut:micronaut-retry")
    implementation("org.yaml:snakeyaml")

    compileOnly("org.graalvm.nativeimage:svm")
    compileOnly("org.projectlombok:lombok")

    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("org.mockito:mockito-junit-jupiter:5.10.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.2")
    testImplementation("org.mockito:mockito-core")

    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
}

application {
    mainClass.set("com.michelin.kafkactl.KafkactlCommand")
}

java {
    sourceCompatibility = JavaVersion.toVersion('17')
    targetCompatibility = JavaVersion.toVersion('17')
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.michelin.kafkactl.*")
    }
}

shadowJar {
    archiveClassifier.set('')
    dependsOn(distTar, distZip)
}

graalvmNative {
    binaries {
        main {
            imageName.set("kafkactl-" + version)
            buildArgs.add("-H:Class=com.michelin.kafkactl.KafkactlCommand")
            buildArgs.add("-H:IncludeResourceBundles=org.ocpsoft.prettytime.i18n.Resources")
            buildArgs.add("-H:+ReportUnsupportedElementsAtRuntime")
            buildArgs.add("-H:+ReportExceptionStackTraces")
            buildArgs.add("-H:+TraceNativeToolUsage")
            buildArgs.add("-H:Log=*ShimDLL:3,link:3,copy:3")
        }
    }
}

dockerfile {
    baseImage = "eclipse-temurin:17-jre-alpine"
}

dockerfileNative {
    baseImage("ubuntu:22.04")
    editDockerfile {
        after('COPY --from=graalvm /home/app/application /app/application') {
            insert('RUN ln -s /app/application /usr/bin/kafkactl && chmod 777 /usr/bin/kafkactl')
        }
    }
}

if (project.hasProperty("releaseLatest")) {
    dockerBuild {
        images.set(["michelin/kafkactl:" + version, "michelin/kafkactl:latest"])
    }

    dockerBuildNative {
        images.set(["michelin/kafkactl:" + version + "-native", "michelin/kafkactl:latest-native"])
    }
} else {
    dockerBuild {
        images.set(["michelin/kafkactl:" + version])
    }

    dockerBuildNative {
        images.set(["michelin/kafkactl:" + version + "-native"])
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "michelin_kafkactl"
        property "sonar.organization", "michelin"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }
}

test {
    reports {
        html.required = false
    }
}

checkstyle {
    toolVersion = '10.12.3'
    configFile = file(".checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    filesMatching("application.yml") {
        filter(ReplaceTokens, tokens: [version: project.version])
    }
}
